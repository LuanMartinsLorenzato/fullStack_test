## FullSTACK_TEST

# Bibliotecas e frameworks utilizados.
- Microsoft.EntityFrameworkCore.Design
- FluentValidation.AspNetCore
- FluentValidation.DependencyInjectionExtensions
- Microsoft.AspNetCore.Authentication.JwtBearer
- Microsoft.AspNetCore.OpenApi
- Microsoft.EntityFrameworkCore
- Microsoft.EntityFrameworkCore.Design
- Microsoft.EntityFrameworkCore.Tools
- Microsoft.IdentityModel.Tokens
- Npgsql.EntityFrameworkCore.PostgreSQL
- Swashbuckle.AspNetCore
- System.IdentityModel.Tokens.Jwt
- Vue 3
- Typescript
- Vitest
- Vite
- Axios
- jwt-decode
- pinia
- Tailwind

# Iniciar a aplicação.

# Comandos.
- cd .\webApi
- docker-compose up -d 
- dotnet add package Microsoft.EntityFrameworkCore.Design
- dotnet tool install --global dotnet-ef
- dotnet ef database update
- dotnet build
- dotnet run
- cd .\frontend
- npm i
- npm run dev


## Comandos para verificar as tabelas.

Listar containers rodando: docker ps
Acessar o shell do container: docker exec -it webapi-postgres-1 bash
Conectar ao banco de dados via psql: psql -U postgres -d my_test_db
Listar tabelas no psql: \dt ou \dt *.* para todos os esquemas
Sair do psql: \q
Sair do shell do container: exit

## Para o desenvolvimento segui os principios SOLID.
S - Classes focadas em manipular operações unicas.
O - Interfaces separadas mantemos as classes aberta a extensão mas fechada para modificação.
L - Nenhuma classe é violada ou sobrepõe sua interface.
I - Separando as interfaces temos melhor segregação de interfaces para utilizar seus métodos.
D - Um resultado da boa implementação dos outros principios utilizando interfaces.
